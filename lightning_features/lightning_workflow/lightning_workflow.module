<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\node\NodeTypeInterface;
use Drupal\user\Entity\Role;
use Drupal\views\ViewExecutable;
use Drupal\workbench_moderation\Entity\ModerationState;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function lightning_workflow_node_type_insert(NodeTypeInterface $node_type) {
  /** @var \Drupal\user\RoleInterface $role */
  $role = Role::load($node_type->id() . '_creator');
  if ($role) {
    $role
      ->grantPermission('view any unpublished content')
      ->grantPermission('use draft_draft transition')
      ->grantPermission('use draft_needs_review transition')
      ->grantPermission('use needs_review_needs_review transition')
      ->grantPermission('view latest version')
      ->save();
  }

  $role = Role::load($node_type->id() . '_reviewer');
  if ($role) {
    $role
      // @TODO: Not sure if this role should have draft_published access...
      ->grantPermission('use draft_published transition')
      ->grantPermission('use needs_review_draft transition')
      ->grantPermission('use needs_review_published transition')
      ->grantPermission('use published_published transition')
      ->save();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function lightning_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state) {
  if ($form_state->getStorage()['view']->storage->id() == 'content') {
    if (isset($form['moderation_state'])) {
      $form['moderation_state'] = [
        '#type' => 'select',
        '#title' => $form['moderation_state']['#title'],
        '#options' => [
          '' => \Drupal::translation()->translate('- any -'),
        ],
      ];
      /** @var \Drupal\workbench_moderation\ModerationStateInterface $state */
      foreach (ModerationState::loadMultiple() as $state) {
        $form['moderation_state']['#options'][$state->id()] = $state->label();
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function lightning_workflow_views_pre_render(ViewExecutable $view) {
  if ($view->storage->id() == 'moderation_history') {
    foreach ($view->result as $index => $row) {
      $entity = $row->_entity;

      if (empty($previous) || $previous->moderation_state->target_id != $entity->moderation_state->target_id) {
        $previous = $entity;
      }
      else {
        unset($view->result[$index]);
        $view->total_rows--;
      }
    }
  }
}
